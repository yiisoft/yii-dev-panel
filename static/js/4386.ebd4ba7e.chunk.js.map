{"version":3,"file":"static/js/4386.ebd4ba7e.chunk.js","mappings":"qOAIMA,EAAoB,SAACC,EAAUD,EAAmBE,GACtD,GAAID,GAAO,mBAAoBA,EAAK,CAClC,IAAME,GAAQC,EAAAA,EAAAA,KAAIF,EAAQF,GAC1BC,EAAII,kBAAmBF,GAASA,EAAMG,SAAY,IAElDL,EAAIM,gBAAA,GAKKL,EAAyB,SACpCE,EACAH,GAAA,IAAAC,EAAA,SAIWA,GACT,IAAMC,EAAQF,EAAQO,OAAON,GACzBC,GAASA,EAAMM,KAAO,mBAAoBN,EAAMM,IAClDT,EAAkBG,EAAMM,IAAKP,EAAWE,GAC/BD,EAAMO,MACfP,EAAMO,KAAKC,SAAQ,SAACV,GAAA,OAA0BD,EAAkBC,EAAKC,EAAWE,EAAA,KALpF,IAAK,IAAMD,KAAaF,EAAQO,OAAAN,EAArBC,EAAA,ECXAA,EAAc,SACzBH,EACAG,GAEAA,EAAQS,2BAA6BV,EAAuBF,EAAQG,GAEpE,IAAMU,EAAc,CAAC,EACrB,IAAK,IAAMC,KAAQd,EAAQ,CACzB,IAAMe,GAAQX,EAAAA,EAAAA,KAAID,EAAQK,OAAQM,IAElCb,EAAAA,EAAAA,KACEY,EACAC,EACAE,OAAOC,OAAOjB,EAAOc,GAAO,CAAEL,IAAKM,GAASA,EAAMN,MAAA,CAItD,OAAOI,CAAA,C","sources":["../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts"],"sourcesContent":["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"],"names":["e","i","t","f","r","setCustomValidity","message","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","o","a","n","Object","assign"],"sourceRoot":""}