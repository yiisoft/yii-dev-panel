{"version":3,"file":"static/js/6822.534870e1.chunk.js","mappings":"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","sources":["../../../node_modules/react-router-dom/dom.ts","../../../node_modules/react-router-dom/index.tsx"],"sourcesContent":["import type { FormEncType, HTMLFormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_detectErrorBoundary as detectErrorBoundary,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + to)\n          : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n"],"names":["defaultMethod","defaultEncType","isHtmlElement","object","tagName","createSearchParams","init","URLSearchParams","Array","isArray","Object","keys","reduce","memo","key","value","concat","map","v","getFormSubmissionInfo","target","defaultAction","options","method","action","encType","formData","toLowerCase","submissionTrigger","getAttribute","FormData","name","append","isButtonElement","isInputElement","type","form","Error","_step2","_iterator2","_createForOfIteratorHelper","s","n","done","_step2$value","_slicedToArray","err","e","f","_i","_Object$keys","length","_window$location","window","location","protocol","host","url","URL","createBrowserRouter","routes","opts","createRouter","basename","future","history","createBrowserHistory","hydrationData","parseHydrationData","detectErrorBoundary","UNSAFE_detectErrorBoundary","initialize","createHashRouter","createHashHistory","_window","state","__staticRouterHydrationData","errors","_extends","deserializeErrors","serialized","_i2","_entries","entries","_entries$_i","val","__type","ErrorResponse","status","statusText","data","internal","error","message","stack","BrowserRouter","_ref","children","historyRef","React","current","v5Compat","_React$useState","_React$useState2","setState","listen","Router","navigationType","navigator","HashRouter","_ref2","_React$useState3","_React$useState4","HistoryRouter","_ref3","_React$useState5","_React$useState6","isBrowser","document","createElement","ABSOLUTE_URL_REGEX","Link","_ref4","ref","absoluteHref","onClick","relative","reloadDocument","replace","to","preventScrollReset","rest","_objectWithoutPropertiesLoose","_excluded","UNSAFE_NavigationContext","isExternal","test","currentUrl","href","targetUrl","startsWith","path","stripBasename","pathname","origin","search","hash","useHref","internalOnClick","useLinkClickHandler","event","defaultPrevented","NavLink","_ref5","_ref5$ariaCurrent","ariaCurrentProp","_ref5$caseSensitive","caseSensitive","_ref5$className","className","classNameProp","_ref5$end","end","styleProp","style","_excluded2","useResolvedPath","useLocation","routerState","UNSAFE_DataRouterStateContext","toPathname","encodeLocation","locationPathname","nextLocationPathname","navigation","isActive","charAt","isPending","ariaCurrent","undefined","filter","Boolean","join","Form","props","FormImpl","DataRouterHook","DataRouterStateHook","_ref6","forwardedRef","_ref6$method","onSubmit","fetcherKey","routeId","_excluded3","submit","useSubmitImpl","formMethod","formAction","useFormAction","preventDefault","submitter","nativeEvent","submitMethod","currentTarget","ScrollRestoration","_ref7","useScrollRestoration","getKey","storageKey","useDataRouterContext","hookName","ctx","UNSAFE_DataRouterContext","UNSAFE_invariant","useDataRouterState","_temp","_ref9","replaceProp","navigate","useNavigate","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","hasSetSearchParamsRef","searchParams","locationSearch","defaultSearchParams","_step","_iterator","_loop","has","getAll","forEach","setSearchParams","nextInit","navigateOptions","newSearchParams","useSubmit","router","UseSubmitImpl","_getFormSubmissionInf","formEncType","fetch","_temp2","routeContext","UNSAFE_RouteContext","_routeContext$matches","matches","slice","match","route","index","params","delete","toString","joinPaths","fetcherId","useFetcher","_route$matches","UseFetcher","id","_React$useState7","String","_React$useState9","createFetcherForm","_React$useState11","load","fetcher","getFetcher","fetcherWithComponents","deleteFetcher","console","warn","useFetchers","UseFetchers","_toConsumableArray","fetchers","values","SCROLL_RESTORATION_STORAGE_KEY","savedScrollPositions","_temp3","_ref11","UseScrollRestoration","_useDataRouterState","restoreScrollPosition","useMatches","useNavigation","scrollRestoration","callback","capture","addEventListener","removeEventListener","usePageHide","scrollY","sessionStorage","setItem","JSON","stringify","sessionPositions","getItem","parse","disableScrollRestoration","enableScrollRestoration","el","getElementById","scrollIntoView","scrollTo","useBeforeUnload","usePrompt","_ref8","when","blocker","unstable_useBlocker","reset","confirm","setTimeout","proceed"],"sourceRoot":""}