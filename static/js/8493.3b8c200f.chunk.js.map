{"version":3,"file":"static/js/8493.3b8c200f.chunk.js","mappings":"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","sources":["../../../node_modules/@remix-run/router/history.ts","../../../node_modules/@remix-run/router/utils.ts","../../../node_modules/@remix-run/router/router.ts","../../../node_modules/@babel/runtime/helpers/esm/createSuper.js","../../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../../../node_modules/@babel/runtime/helpers/esm/inherits.js","../../../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../../node_modules/@babel/runtime/helpers/esm/toArray.js","../../../node_modules/@babel/runtime/helpers/esm/construct.js","../../../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../../../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      to,\n      future,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      href,\n      future,\n      opts,\n      true\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  future: FutureConfig,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}"],"names":["Action","ResultType","PopStateEventType","createMemoryHistory","options","entries","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","_window$location","usr","createHashHistory","_parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","invariant","value","message","Error","cond","console","warn","e","getHistoryState","idx","current","_extends","random","toString","_ref","_ref$pathname","_ref$search","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","historyState","pushState","error","assign","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","route","treePath","concat","_toConsumableArray","id","join","children","isIndexRoute","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","computeScore","forEach","_route$path","includes","_step","_iterator","_createForOfIteratorHelper","explodeOptionalSegments","s","done","exploded","err","f","segments","split","_segments","_toArray","first","rest","isOptional","endsWith","required","restExploded","result","apply","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","array","keyMatch","_keyMatch","_slicedToArray","optional","param","pattern","_compilePath","paramNames","regexpSource","_","paramName","matcher","RegExp","compilePath","_compilePath2","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref3","toPathname","_ref3$search","_ref3$hash","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","arguments","_createClass","_wrapNativeSuper","DeferredData","reject","_this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","this","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref4","_defineProperty","trackPromise","_this2","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","_this3","_this4","abort","v","k","_resolveData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this5","wrap","_context","prev","next","cancel","resolve","subscribe","sent","abrupt","stop","_x","size","_ref2","_ref5","_tracked","isTrackedPromise","_error","_data","unwrapTrackedPromise","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","_step2","mergeLoaderData","_iterator2","deleteBlocker","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_callee2","opts","_normalizeNavigateOpt2","submission","currentLocation","userReplace","blockerKey","_context2","normalizeNavigateOptions","shouldBlockNavigation","updateBlocker","startNavigation","pendingError","_x4","_x5","_x6","_startNavigation","_callee3","routesToUse","loadingNavigation","_getShortCircuitMatch2","notFoundMatches","_route","request","pendingActionData","actionOutput","_yield$handleLoaders","shortCircuited","_context3","startUninterruptedRevalidation","saveScrollPosition","overrideNavigation","cancelActiveDeferreds","createClientSideRequest","findNearestBoundary","handleAction","pendingActionError","Request","handleLoaders","fetcherSubmission","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","actionMatch","boundaryMatch","_context4","interruptActiveLoads","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","isDeferredResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_x20","_handleLoaders","_callee5","activeSubmission","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_yield$callLoadersAnd","results","loaderResults","fetcherResults","_processLoaderData","didAbortFetchLoads","_context5","getMatchesToLoad","rf","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","abortStaleFetchLoads","getFetcher","_handleFetcherAction","_callee6","requestMatches","_error2","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_context6","setFetcherError","isFetchActionRedirect","staleKey","_handleFetcherLoader","_callee7","_context7","resolveDeferredData","t0","_x33","_x34","_x35","_startRedirectNavigation","_callee8","_temp","_window","_ref6","redirectLocation","isDifferentBasename","redirectHistoryAction","_state$navigation","_context8","revalidate","_isFetchActionRedirect","_x36","_x37","_x38","_x39","_x40","_callLoadersAndMaybeResolveData","_callee9","currentMatches","fetchersToLoad","_context9","all","resolveDeferredResults","_cancelledDeferredRou","abortFetcher","deleteFetcher","markFetchersDone","_step3","_iterator3","_step4","doneKeys","_iterator4","landedId","_step5","yeetedKeys","_iterator5","_step5$value","newBlocker","blocker","_entries","blockerFunction","predicate","cancelledRouteIds","dfd","userMatches","createUseMatchesMatch","y","initialize","enableScrollRestoration","positions","getPosition","getKey","fetch","_normalizeNavigateOpt","_x21","_x22","_x23","_x24","_x25","_x26","handleFetcherAction","_x27","_x28","_x29","_x30","_x31","_x32","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","isFetcher","isSubmissionNavigation","isValidMethod","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","loadLazyRouteModule","_x60","_x61","_x62","_loadLazyRouteModule","_callee15","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_context16","_x63","_x64","_x65","_x66","_x67","_x68","_x69","_x70","_x71","_x72","_callLoaderOrAction","_callee16","isStaticRequest","isRouteRequest","requestContext","resultType","onReject","runHandler","handler","activeMatches","resolvedLocation","isSameBasename","contentType","_result$init","_result$init2","_context17","context","finish","isResponse","protocol","response","text","statusCode","isDeferredData","deferred","body","_step6","URLSearchParams","_iterator6","_step6$value","File","name","processRouteLoaderData","foundError","loaderHeaders","_processRouteLoaderDa","_revalidatingFetchers","newLoaderData","_step7","mergedLoaderData","_iterator7","hasOwnProperty","reverse","find","_temp4","_ref11","errorMessage","resolveData","_x73","_x74","_x75","_x76","_x77","_x78","_resolveDeferredResults","_callee17","_loop","_context19","isRevalidatingLoader","_context18","delegateYield","_x79","_x80","_x81","_resolveDeferredData","_callee18","unwrap","_context20","unwrappedData","getAll","handle","pathMatches","Derived","hasNativeReflectConstruct","Super","NewTarget","constructor","Reflect","construct","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","bind","__proto__","subClass","superClass","TypeError","prototype","create","writable","configurable","_isNativeReflectConstruct","sham","Proxy","valueOf","call","_possibleConstructorReturn","self","arr","_construct","Parent","args","Class","isNativeReflectConstruct","instance","Function","_cache","Wrapper","enumerable"],"sourceRoot":""}