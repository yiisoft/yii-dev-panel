{"version":3,"file":"static/js/9164.218fea8e.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/immer/src/utils/errors.ts","../node_modules/immer/src/utils/common.ts","../node_modules/immer/src/utils/plugins.ts","../node_modules/immer/src/core/scope.ts","../node_modules/immer/src/core/finalize.ts","../node_modules/immer/src/core/proxy.ts","../node_modules/immer/src/core/immerClass.ts","../node_modules/immer/src/core/current.ts","../node_modules/immer/src/plugins/es5.ts","../node_modules/immer/src/plugins/patches.ts","../node_modules/immer/src/immer.ts","../node_modules/immer/src/utils/env.ts"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ProxyType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tconst p = \"\" + path[i]\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread2","target","source","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","n","r","t","Array","e","Error","map","join","Q","getPrototypeOf","hasOwnProperty","call","constructor","Function","toString","Z","isArray","L","s","v","o","nn","u","has","prototype","f","set","add","c","X","Map","q","Set","p","l","slice","rn","writable","configurable","create","d","y","delete","h","freeze","isFrozen","tn","m","_","U","j","O","g","S","w","P","M","x","H","A","I","k","N","R","concat","D","z","E","F","T","C","en","on","Proxy","revocable","revoke","proxy","J","K","from","this","Math","min","$","path","op","G","W","Symbol","B","Reflect","for","iterator","getOwnPropertyNames","Number","isNaN","deleteProperty","setPrototypeOf","un","produce","Promise","then","produceWithPatches","useProxies","setUseProxies","autoFreeze","setAutoFreeze","createDraft","finishDraft","applyPatches","an","fn","cn","bind","pn"],"sourceRoot":""}